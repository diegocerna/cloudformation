{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Punto Facil Hamster Worker Instance - filename: ni_worker_puntofacil.template",

  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters.",
      "Default": "stamp-"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m3.medium",
      "AllowedValues" : [ "t2.micro","t2.medium","m1.small","m3.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SubnetId" : {
      "Type" : "String",
      "Description" : "Nicaragua Accounts SubnetId in your Virtual Private Cloud (VPC)",
      "Default": "subnet-"
    },

    "StackID" : {
      "Type" : "String",
      "Description" : "Stack ID name",
      "Default" : "-"
    },

    "StackIDDB" : {
      "Type" : "String",
      "Description" : "Stack ID name for DataBase",
      "Default" : ""
    },

    "SecurityGroupId" : {
      "Type" : "String",
      "Description" : "Nicaragua Accounts SecurityGroupId your Virtual Private Cloud (VPC)",
      "Default": "sg-"
    },

    "AppDeployBranch" : {
      "Type" : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default" : ""
    },

    "RoleDeployBranch" : {
      "Type" : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default" : ""
    },

    "SitesDeployBranch" : {
      "Type" : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default" : ""
    },

    "Version" : {
      "Type" : "String",
      "Description" : "stamp1 for current version, stamp2 for disaster recovery and staging for staging production"
    },

    "Environment" : {
      "Type" : "String",
      "Description" : "Application's environment.",
      "Default" : ""
    }
  },

    "Mappings" : {
        "RegionMap" : {
            "sa-east-1"      : {"AMI" : "ami-d545e5c8" },
            "us-west-1"      : {"AMI" : "ami-17829452" },
            "ap-northeast-1" : {"AMI" : "ami-35bbd334" },
            "ap-southeast-1" : {"AMI" : "ami-605c0a32" },
            "ap-southeast-2" : {"AMI" : "ami-fb4bd5c1" },
            "eu-west-1"      : {"AMI" : "ami-d03dcaa7" },
            "us-east-1"      : {"AMI" : "ami-0c56df64" },
            "us-west-2"      : {"AMI" : "ami-07fcb437" }
        },

        "version" : {
          "stamp1"          : { "HOSTNAME" : "wpf1001" },
          "stamp2"          : { "HOSTNAME" : "wpf1002" },
          "staging1"        : { "HOSTNAME" : "wpf3001" },
          "staging2"        : { "HOSTNAME" : "wpf3002" },
          "sandbox1"        : { "HOSTNAME" : "wpf4001" },
          "sandbox2"        : { "HOSTNAME" : "wpf4002" },
          "qa1"             : { "HOSTNAME" : "wpf5001" },
          "qa2"             : { "HOSTNAME" : "wpf5002" }
        },

        "env" : {
          "dev"            : { "ENV" : "development", "DOT" : ".dev" },
          "qa"             : { "ENV" : "qa", "DOT" : ".qa" },
          "sandbox"        : { "ENV" : "sandbox", "DOT" : ".sandbox"  },
          "production"     : { "ENV" : "production", "DOT" : "" }
        }
    },

    "Resources" : {

        "DNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : "bluekite.com.",
                "Comment" : "DNS name for my instance.",
                "Name" : {"Fn::Join" : ["", ["workerpuntofacil", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]},".bluekite.com."]]},
                "Type" : "A",
                "TTL" : "300",
                "ResourceRecords" : [ { "Fn::GetAtt" : [ "NiWorkerPuntofacilInstance", "PrivateIp" ] } ]
            },
            "DependsOn" : "NiWorkerPuntofacilInstance"
        },

        "NiWorkerPuntofacilInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
              "Comment" : "Catalog - Rails Aplication Instance"
          },

            "Properties" : {
                "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
                "SecurityGroupIds" : [ {"Ref" : "SecurityGroupId"} ],
                "SubnetId" : { "Ref" : "SubnetId" },
                "InstanceType" : { "Ref" : "InstanceType" },
                "KeyName" : { "Ref" : "KeyName" },
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                           {"Key" : "Name", "Value" : { "Fn::Join" : [ "", ["workerpuntofacil", { "Ref" : "StackID" } , {"Ref" : "Environment"} ] ] } } ],
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",

                    "# Helper function to notify of failed operation\n",
                    "function error_exit\n",
                    "{\n",
                    "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WorkerPuntofacilWaitHandle" }, "'\n",
                    "  exit 1\n",
                    "}\n",

                    "# Run Instance default configuration via CloudFormation::Init\n",
                    "cfn-init -v --region ", { "Ref" : "AWS::Region" },
                    "    -s ", { "Ref" : "AWS::StackId" },
                    " -r NiWorkerPuntofacilInstance",
                    " -c default",
                    " || error_exit 'Failed to run cfn-init'\n",

                    "# Register Github fingerprints\n",
                    "ssh-keygen -f ~/.ssh/known_hosts -H -F github.com | grep -q found || ssh-keyscan -H github.com >> ~/.ssh/known_hosts\n",

                    "# Copy credentials to root user\n",
                    "cp /home/ubuntu/.ssh/* /root/.ssh/\n",

                    "# Add FQDN on etc/environment\n",
                    "echo ", { "Fn::Join" : [ "" , ["FQDN=workerpuntofacil", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]}, ">> /etc/environment\n",
                    "echo ", "STACKID=", { "Ref" : "StackID" }, ">> /etc/environment\n",
                    "echo ", { "Fn::Join" : [ "" , ["FACTER_queue_host=accounts", { "Ref" : "StackID" }, ".ni", { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]}, ">> /etc/environment\n",

                    "# Clone sites repo to ubuntu user home\n",
                    "git clone -b ", { "Ref" : "SitesDeployBranch" }, " git@github.com:blue-kite/xbp_puppet_sites.git /home/ubuntu/sites > /tmp/git.log 2>&1 || error_exit 'Failed to clone sites repo'\n",

                    "# Clone role app repo\n",
                    "git clone -b", { "Ref" : "RoleDeployBranch" }, " git@github.com:blue-kite/xbp_puppet_role_worker_puntofacil.git /etc/puppet/modules/worker_puntofacil > /tmp/git.log 2>&1 || error_exit 'Failed to clone role app repo'\n",
                    "chown ubuntu:ubuntu -R /etc/puppet/modules/worker_puntofacil\n",

                    "#Installing Ruby\n",
                    "apt-get -y install libyaml-0-2\n",
                    "apt-get -y install ruby1.9.3\n",
                    "update-alternatives --set ruby /usr/bin/ruby1.9.1\n",
                    "apt-get -y install rubygems\n",
                    "update-alternatives --set gem /usr/bin/gem1.9.1\n",

                    "# Install application's dependencies via librarian puppet\n",
                    "cd /etc/puppet/modules/worker_puntofacil\n",
                    "rm Gemfile*\n",
                    "sudo librarian-puppet install --clean --verbose --path=/etc/puppet/modules > /tmp/librarian-puppet.log 2>&1 || error_exit 'failed to install puppet submodules'\n",

                    "#setting my custom facts\n",
                    "mkdir -p /etc/facter/facts.d\n",
                    "touch /etc/facter/facts.d/custom_facts.txt\n",
                    "echo ", { "Fn::Join" : [ "" , ["fqdn=workerpuntofacil", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]},        ">> /etc/facter/facts.d/custom_facts.txt\n",
                    "echo ", { "Fn::Join" : [ "" , ["queue_host=queue", { "Ref" : "StackIDDB" }, ".accounts", { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]},        ">> /etc/facter/facts.d/custom_facts.txt\n",
                    "echo ", "stackid=", { "Ref" : "StackID" },       ">> /etc/facter/facts.d/custom_facts.txt\n",
                    "echo ", "revision=", { "Ref" : "AppDeployBranch" }, ">> /etc/facter/facts.d/custom_facts.txt\n",
                    "echo ", { "Fn::Join" : [ "" , ["logserver_host=logs", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]},        ">> /etc/facter/facts.d/custom_facts.txt\n",
                    "echo logserver_port=5001  >> /etc/facter/facts.d/custom_facts.txt\n",
                    "echo app_name=workerpuntofacil >> /etc/facter/facts.d/custom_facts.txt\n",
                    "echo custom_hostname=", { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "HOSTNAME" ]}, ">> /etc/facter/facts.d/custom_facts.txt\n",

                    "echo ", { "Fn::Join" : [ "" , ["nagios_beanstalk_host=queue", { "Ref" : "StackIDDB" }, ".accounts", { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]},      ">> /etc/facter/facts.d/custom_facts.txt\n",


                    "# Clone role hostname repo\n",
                    "git clone git@github.com:victormarroquin/Puppet-HostName.git /etc/puppet/modules/hosts > /tmp/git.log 2>&1 || error_exit 'Failed to clone hostname repo'\n",

                    "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug /etc/puppet/modules/hosts/tests/init.pp > /tmp/pupet_hostname.log 2>&1 || error_exit 'failed to apply hosts puppet manifests'\n",

                    "sudo apt-get update\n",
                    "sudo apt-get upgrade\n",

                    "cd /home/ubuntu/sites\n",
                    "sudo sh setup.sh\n",

                    "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug --environment=", { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "ENV" ]}, " /home/ubuntu/sites/site.pp > /tmp/puppet.log 2>&1 || error_exit 'failed to apply puppet manifests'\n",

                    "# SET TIMEZONE to NI\n",
                    "aptitude -y install ntp\n",
                    "service ntp restart\n",
                    "echo \"America/Managua\" > /etc/timezone\n",
                    "dpkg-reconfigure -f noninteractive tzdata\n",

                    "# Signal setup is complete\n",
                    "cfn-signal -e $? -r 'Completed configuration' '",

                    {
                        "Ref" : "WorkerPuntofacilWaitHandle"
                    },
                    "'\n"
                ]]}}
            }
        },

    "WorkerPuntofacilWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WorkerPuntofacilWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "NiWorkerPuntofacilInstance",
      "Properties" : {
        "Handle" : {"Ref" : "WorkerPuntofacilWaitHandle"},
        "Timeout" : "2000"
      }
    }
  },

  "Outputs" : {
    "InstanceId" : {
      "Value" : { "Ref" : "NiWorkerPuntofacilInstance" },
      "Description" : "Instance Id of newly created instance"
    },

    "IPAddress" : {
      "Value" : { "Fn::GetAtt" : [ "NiWorkerPuntofacilInstance", "PrivateIp" ] },
      "Description" : "Private IP address of instance"
    },

    "DomainName" : {
      "Value" : { "Ref" : "DNSRecord" }
    }
  }
}
