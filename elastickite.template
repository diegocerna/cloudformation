{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "ElasticSearch",

    "Parameters" : {
        "KeyName": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern" : "[\\x20-\\x7E]*",
            "ConstraintDescription" : "can contain only ASCII characters.",
            "Default": "redtail_development"
        },

        "InstanceType" : {
            "Description" : "WebServer EC2 instance type",
            "Type" : "String",
            "Default" : "m3.medium",
            "AllowedValues" : [ "t2.micro","t2.medium","m1.small","m3.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },

        "Environment" : {
            "Type" : "String",
            "Description" : "Environment for the NAT, i.e. dev, production, etc.",
            "Default" : "dev"
        },

        "StackID" : {
            "Type" : "String",
            "Description" : "Stack ID name",
            "Default" : "-"
        },

        "SubnetId" : {
            "Type" : "String",
            "Description" : "SubnetId of an existing subnet in your Virtual Private Cloud (VPC)",
            "Default": "subnet-cbc8c2a9"
        },

        "SecurityGroupId" : {
            "Type" : "String",
            "Description" : "SecurityGroupId of an existing subnet in your Virtual Private Cloud (VPC)",
            "Default": "sg-1cd6c07e"
        },

        "DeployBranch" : {
            "Type" : "String",
            "Description" : "Git branch where to deploy the code from.",
            "Default" : "master"
        }
    },

    "Mappings" : {
        "RegionMap" : {
          "sa-east-1"      : {"AMI" : "ami-d545e5c8" },
          "us-west-1"      : {"AMI" : "ami-49ede60c" },
          "ap-northeast-1" : {"AMI" : "ami-35bbd334" },
          "ap-southeast-1" : {"AMI" : "ami-605c0a32" },
          "ap-southeast-2" : {"AMI" : "ami-fb4bd5c1" },
          "eu-west-1"      : {"AMI" : "ami-d03dcaa7" },
          "us-east-1"      : {"AMI" : "ami-0e07a566" },
          "us-west-2"      : {"AMI" : "ami-8b6d2ebb" }
        },

        "dot" : {
            "test"           : { "DOT" : ".test" },
            "dev"            : { "DOT" : ".dev" },
            "qa"             : { "DOT" : ".qa" },
            "sandbox"        : { "DOT" : ".sandbox" },
            "production"     : { "DOT" : "" }
        }
    },

    "Resources" : {


        "DNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : "bluekite.com.",
                "Comment" : "DNS name for my instance.",
                "Name" : { "Fn::Join" : [ "", ["search", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "dot", { "Ref" : "Environment" }, "DOT" ]},".bluekite.com."]]},
                "Type" : "A",
                "TTL" : "900",
                "ResourceRecords" : [ { "Fn::GetAtt" : [ "ElasticSearchInstance", "PrivateIp" ] } ]
            },
            "DependsOn" : "ElasticSearchInstance"
        },

        "ElasticSearchInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "Comment" : "Elastic Search Application Instance",
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "default" : ["config_credentials", "config_packages"]
                    },
                    "config_credentials" : {
                        "files" : {
                            "/home/ubuntu/.ssh/id_rsa" : {
                                "source" : "https://s3.amazonaws.com/redtail/redtail_rsa",
                                "mode" : "600",
                                "owner" : "ubuntu",
                                "group" : "ubuntu"
                            },
                            "/home/ubuntu/.ssh/id_rsa.pub" : {
                                "source" : "https://s3.amazonaws.com/redtail/redtail_rsa.pub",
                                "mode" : "600",
                                "owner" : "ubuntu",
                                "group" : "ubuntu"
                            },
                            "/home/ubuntu/.ssh/config" : {
                                "mode" : "600",
                                "owner" : "ubuntu",
                                "group" : "ubuntu",
                                "content" : { "Fn::Join" : ["", [
                                    "Host github.com\n",
                                    "\tStrictHostKeyChecking no\n",
                                    "\tUser git\n",
                                    "\tPreferredAuthentications publickey\n",
                                    "\tIdentityFile ~/.ssh/id_rsa\n"
                                ]]}
                            }
                        }
                    },
                    "config_packages" : {
                        "packages" : {
                            "apt" : {
                                "git"             : [],
                                "curl"            : [],
                                "tmux"            : [],
                                "build-essential" : [],
                                "python-software-properties" : []
                            }
                        }
                    }
                }
            },

            "Properties" : {
                "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
                "SecurityGroupIds" : [ {"Ref" : "SecurityGroupId"} ],
                "SubnetId" : { "Ref" : "SubnetId" },
                "InstanceType" : { "Ref" : "InstanceType" },
                "KeyName" : { "Ref" : "KeyName" },
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                           {"Key" : "Name", "Value" : { "Fn::Join" : [ "", ["search.", {"Ref" : "Environment"} ] ] } } ],
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",

                    "# Helper function to notify of failed operation\n",
                    "function error_exit\n",
                    "{\n",
                    "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WebServerWaitHandle" }, "'\n",
                    "  exit 1\n",
                    "}\n",

                    "# Run Instance default configuration via CloudFormation::Init\n",
                    "cfn-init -v --region ", { "Ref" : "AWS::Region" },
                    "    -s ", { "Ref" : "AWS::StackId" },
                    " -r ElasticSearchInstance",
                    " -c default",
                    " || error_exit 'Failed to run cfn-init'\n",

                    "# Register Github fingerprints\n",
                    "ssh-keygen -f ~/.ssh/known_hosts -H -F github.com | grep -q found || ssh-keyscan -H github.com >> ~/.ssh/known_hosts\n",

                    "# Copy credentials to root user\n",
                    "cp /home/ubuntu/.ssh/* /root/.ssh/\n",

                    "# Add FQDN on etc/environment\n",
                    "echo ", { "Fn::Join" : [ "" , ["FQDN=search", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "dot", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]}, ">> /etc/environment\n",
                    "echo ", "STACKID=", { "Ref" : "StackID" }, ">> /etc/environment\n",

                    "#Installing Ruby\n",
                    "apt-get -y install libyaml-0-2\n",
                    "apt-get -y install ruby1.9.3\n",
                    "update-alternatives --set ruby /usr/bin/ruby1.9.1\n",
                    "update-alternatives --set gem /usr/bin/gem1.9.1\n",

                    "# Clone app repo to ubuntu user home\n",
                    "git clone git@github.com:blue-kite/elastickite.git -b ", {"Ref" : "DeployBranch"}, " /home/ubuntu/elastickite > /tmp/git.log 2>&1 || error_exit 'Failed to clone repo'\n",
                    "chown ubuntu:ubuntu -R /home/ubuntu/elastickite\n",

                    "# Install puppet via gems\n",
                    "sudo gem install puppet --no-rdoc --no-ri > /tmp/gem-puppet.log 2>&1 || error_exit 'Failed install puppet gem'\n",

                    "# Install Librarian Ruby\n",
                    "sudo gem install librarian-puppet --no-rdoc --no-ri > /tmp/gem-librarian-puppet.log 2>&1 || error_exit 'Failed install librarian puppet gem'\n",

                    "# Install application's dependencies via puppet\n",
                    "cd /home/ubuntu/elastickite/puppet\n",
                    "export HOME=/home/ubuntu && librarian-puppet install --clean --verbose > /tmp/librarian-puppet.log 2>&1 || error_exit 'failed to install puppet submodules'\n",

                    "cd /home/ubuntu/elastickite\n",
                    "sudo puppet apply --verbose --debug --modulepath=./puppet/modules ./puppet/manifests/aws-", {"Ref": "Environment"}, ".pp > /tmp/puppet.log 2>&1 || error_exit 'failed to apply puppet manifests'\n",

                    "# Signal setup is complete\n",
                    "cfn-signal -e $? -r 'Completed configuration' '",
                    {
                        "Ref" : "WebServerWaitHandle"
                    },
                    "'\n"
                ]]}}
            }
        },

        "WebServerWaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },

        "WebServerWaitCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "ElasticSearchInstance",
            "Properties" : {
                "Handle" : {"Ref" : "WebServerWaitHandle"},
                "Timeout" : "1200"
            }
        }
    },

    "Outputs" : {
        "InstanceId" : {
            "Value" : { "Ref" : "ElasticSearchInstance" },
            "Description" : "Instance Id of newly created instance"
        },

        "IPAddress" : {
            "Value" : { "Fn::GetAtt" : [ "ElasticSearchInstance", "PrivateIp" ] },
            "Description" : "Private IP address of instance"
        },

        "DomainName" : {
            "Value" : { "Ref" : "DNSRecord" }
        }
    }
}
