{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Configure Oauth Node.js Application",

    "Parameters" : {
        "KeyName": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern" : "[\\x20-\\x7E]*",
            "ConstraintDescription" : "can contain only ASCII characters.",
            "Default": "redtail_production"
        },
        
        "Environment" : {
            "Description" : "Environment for the Url",
            "Type" : "String",
            "Default" : "test"
        },

        "InstanceType" : {
            "Description" : "WebServer EC2 instance type",
            "Type" : "String",
            "Default" : "m1.medium",
            "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },

        "DeployBranch" : {
            "Type" : "String",
            "Description" : "Git branch where to deploy the code from.",
            "Default" : "edge"
        }
    },

    "Mappings" : {
        "RegionMap" : {
            "us-east-1"      : { "AMI" : "ami-a73264ce" },
            "us-west-1"      : { "AMI" : "ami-8ca89ec9" },
            "us-west-2"      : { "AMI" : "ami-6aad335a" },
            "sa-east-1"      : { "AMI" : "ami-35258228" }
        }
    },

    "Resources" : {
        "InstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : ["SendEmails"]
            }
        },

        "DNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : "bluekite.com.",
                "Comment" : "DNS name for my instance.",
                "Name" : "oauth.bluekite.com.",
                "Type" : "CNAME",
                "TTL" : "900",
                "ResourceRecords" : [ { "Fn::GetAtt" : [ "WebServerInstance", "PublicDnsName" ] } ]
            },
            "DependsOn" : "WebServerInstance"
        },

        "WebServerInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "Comment" : "Oauth NodeJS Application",
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "default" : ["config_credentials", "config_packages"]
                    },
                    "config_credentials" : {
                        "files" : {
                            "/home/ubuntu/.ssh/id_rsa" : {
                                "source" : "https://s3.amazonaws.com/redtail/redtail_rsa",
                                "mode" : "600",
                                "owner" : "ubuntu",
                                "group" : "ubuntu"
                            },
                            "/home/ubuntu/.ssh/id_rsa.pub" : {
                                "source" : "https://s3.amazonaws.com/redtail/redtail_rsa.pub",
                                "mode" : "600",
                                "owner" : "ubuntu",
                                "group" : "ubuntu"
                            },
                            "/home/ubuntu/.ssh/config" : {
                                "mode" : "600",
                                "owner" : "ubuntu",
                                "group" : "ubuntu",
                                "content" : { "Fn::Join" : ["", [
                                    "Host github.com\n",
                                    "\tStrictHostKeyChecking no\n",
                                    "\tUser git\n",
                                    "\tPreferredAuthentications publickey\n",
                                    "\tIdentityFile ~/.ssh/id_rsa\n"
                                ]]}
                            }
                        }
                    },
                    "config_packages" : {
                        "packages" : {
                            "apt" : {
                                "git"             : [],
                                "curl"            : [],
                                "tmux"            : [],
                                "build-essential" : [],
                                "puppet"          : [],
                                "python-software-properties" : []
                            }
                        }
                    }
                }
            },

            "Properties" : {
                "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
                "SecurityGroupIds" : [ {"Ref" : "WebServerSecurityGroup"} ],
                "InstanceType" : { "Ref" : "InstanceType" },
                "KeyName" : { "Ref" : "KeyName" },
                "IamInstanceProfile" : {"Ref" : "InstanceProfile"},
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                           {"Key" : "Name", "Value" : "oauth"} ],
                           "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",

                    "# Helper function to notify of failed operation\n",
                    "function error_exit\n",
                    "{\n",
                    "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WebServerWaitHandle" }, "'\n",
                    "  exit 1\n",
                    "}\n",

                    "# Add puppet repository. Installation will be managed by cfn-init\n",
                    "wget http://apt.puppetlabs.com/puppetlabs-release-precise.deb\n",
                    "sudo dpkg -i puppetlabs-release-precise.deb\n",
                    "sudo apt-get update -y\n",
                    "sudo apt-get upgrade -y\n",

                    "# Install Amazon Tools\n",
                    "apt-get -y install python-setuptools\n",
                    "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",

                    "# Run Instance default configuration via CloudFormation::Init\n",
                    "cfn-init -v --region ", { "Ref" : "AWS::Region" },
                    "    -s ", { "Ref" : "AWS::StackId" },
                    " -r WebServerInstance",
                    " -c default",
                    " || error_exit 'Failed to run cfn-init'\n",

                    "# Register Github fingerprints\n",
                    "ssh-keygen -f ~/.ssh/known_hosts -H -F github.com | grep -q found || ssh-keyscan -H github.com >> ~/.ssh/known_hosts\n",

                    "# Copy credentials to root user\n",
                    "cp /home/ubuntu/.ssh/* /root/.ssh/\n",

                    "# Clone app repo to ubuntu user home\n",
                    "git clone git@github.com:blue-kite/bree.git -b ", {"Ref" : "DeployBranch"}, "  /home/ubuntu/oauth > /tmp/git.log 2>&1 || error_exit 'Failed to clone repo'\n",

                    "chown ubuntu:ubuntu -R /home/ubuntu/oauth\n",


                    "# Install application's dependencies via puppet\n",
                    "cd /home/ubuntu/oauth\n",
                    "git submodule init\n",
                    "git submodule update\n",
                    "sudo puppet apply --verbose --modulepath=./puppet/modules ./puppet/manifests/aws-production.pp > /tmp/puppet.log 2>&1 || error_exit 'failed to apply puppet manifests'\n",

                    "# Signal setup is complete\n",
                    "cfn-signal -e $? -r 'Completed configuration' '",
                    {
                        "Ref" : "WebServerWaitHandle"
                    },
                    "'\n"
                ]]}}
            }
        },

        "WebServerWaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },

        "WebServerWaitCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "WebServerInstance",
            "Properties" : {
                "Handle" : {"Ref" : "WebServerWaitHandle"},
                "Timeout" : "600"
            }
        },

        "WebServerSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable HTTP access via port 80, 443 and SSH access",
                "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}
                ]
            }
        }
    },

    "Outputs" : {
        "InstanceId" : {
            "Value" : { "Ref" : "WebServerInstance" },
            "Description" : "Instance Id of newly created instance"
        },

        "DomainName" : {
            "Value" : { "Ref" : "DNSRecord" }
        }
    }
}