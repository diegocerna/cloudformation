{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Xlogstsh - Logs like a sir",

    "Parameters" : {
        "KeyName": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern" : "[\\x20-\\x7E]*",
            "ConstraintDescription" : "can contain only ASCII characters.",
            "Default": "stamp-"
        },

        "InstanceType" : {
            "Description" : "WebServer EC2 instance type",
            "Type" : "String",
            "Default" : "m3.medium",
            "AllowedValues" : [ "t2.micro","m1.small","m3.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },

        "SubnetId" : {
            "Type" : "String",
            "Description" : "SubnetId of an existing subnet in your Virtual Private Cloud (VPC)",
            "Default": "subnet-"
        },

         "StackID" : {
            "Type" : "String",
            "Description" : "Stack ID name",
            "Default" : "-"
        },

        "SecurityGroupId" : {
            "Type" : "String",
            "Description" : "SecurityGroupId of an existing subnet in your Virtual Private Cloud (VPC)",
            "Default": "sg-"
        },

        "AppDeployBranch" : {
          "Type" : "String",
          "Description" : "Git branch where to deploy the code from.",
          "Default" : ""
        },

        "RoleDeployBranch" : {
          "Type" : "String",
          "Description" : "Git branch where to deploy the code from.",
          "Default" : ""
        },

        "SitesDeployBranch" : {
          "Type" : "String",
          "Description" : "Git branch where to deploy the code from.",
          "Default" : ""
        },

        "Version" : {
          "Type" : "String",
          "Description" : "stamp1 for current version, stamp2 for disaster recovery and staging for staging production"
        },

        "Environment" : {
            "Type" : "String",
            "Description" : "Application's environment.",
            "Default" : "dev"
        }
    },

    "Mappings" : {
        "RegionMap" : {
            "sa-east-1"      : {"AMI" : "ami-d545e5c8" },
            "us-west-1"      : {"AMI" : "ami-49ede60c" },
            "ap-northeast-1" : {"AMI" : "ami-35bbd334" },
            "ap-southeast-1" : {"AMI" : "ami-605c0a32" },
            "ap-southeast-2" : {"AMI" : "ami-fb4bd5c1" },
            "eu-west-1"      : {"AMI" : "ami-d03dcaa7" },
            "us-east-1"      : {"AMI" : "ami-cdc2fda4" },
            "us-west-2"      : {"AMI" : "ami-9a9dfdaa" }
        },

        "version" : {
          "stamp1"          : { "HOSTNAME" : "log1001" },
          "stamp2"          : { "HOSTNAME" : "log1002" },
          "staging"         : { "HOSTNAME" : "log3001" },
          "old"             : { "HOSTNAME" : "logs" }
        },

        "env" : {
          "dev"            : { "ENV" : "development", "DOT" : ".dev" },
          "qa"             : { "ENV" : "qa", "DOT" : ".qa" },
          "sandbox"        : { "ENV" : "sandbox", "DOT" : ".sandbox"  },
          "production"     : { "ENV" : "production", "DOT" : "" }
        }
    },

    "Resources" : {
        "DNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : "bluekite.com.",
                "Comment" : "DNS name for my instance.",
                "Type" : "A",
                "Name" : { "Fn::Join" : [ "", ["logs", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]},".bluekite.com."]]},
                "TTL" : "900",
                "ResourceRecords" : [ { "Fn::GetAtt" : [ "logstashInstance", "PrivateIp" ] } ]
            },
            "DependsOn" : "logstashInstance"
        },

        "logstashInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "Comment" : "logstashInstance - Rails Aplication Instance"
            },
            "Properties" : {
                "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
                "SecurityGroupIds" : [ {"Ref" : "SecurityGroupId"} ],
                "SubnetId" : { "Ref" : "SubnetId" },
                "InstanceType" : { "Ref" : "InstanceType" },
                "KeyName" : { "Ref" : "KeyName" },
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                           {"Key" : "Name", "Value" : { "Fn::Join" : [ "", ["xlogstash", ".", {"Ref" : "Environment"} ] ] } } ],
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",

                    "# Helper function to notify of failed operation\n",
                    "function error_exit\n",
                    "{\n",
                    " cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WebServerWaitHandle" }, "'\n",
                    " exit 1\n",
                    "}\n",

                    "# Run Instance default configuration via CloudFormation::Init\n",
                    "cfn-init -v --region ", { "Ref" : "AWS::Region" },
                    " -s ", { "Ref" : "AWS::StackId" },
                    " -r logstashInstance",
                    " -c default",
                    " || error_exit 'Failed to run cfn-init'\n",

                    "# Register Github fingerprints\n",
                    "ssh-keygen -f ~/.ssh/known_hosts -H -F github.com | grep -q found || ssh-keyscan -H github.com >> ~/.ssh/known_hosts\n",

                    "# Copy credentials to root user\n",
                    "cp /home/ubuntu/.ssh/* /root/.ssh/\n",

                    "# Add FQDN on etc/environment\n",
                    "echo ", { "Fn::Join" : [ "" , ["FQDN=logs", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]}, ">> /etc/environment\n",
                    "echo ", "STACKID=", { "Ref" : "StackID" }, ">> /etc/environment\n",

                    "# Clone sites repo to ubuntu user home\n",
                      "git clone -b", { "Ref" : "SitesDeployBranch" }, "git@github.com:blue-kite/xbp_puppet_sites.git /home/ubuntu/sites > /tmp/git.log 2>&1 || error_exit 'Failed to clone sites repo'\n",

                      "# Clone role app repo\n",
                      "git clone -b", { "Ref" : "RoleDeployBranch" }, "git@github.com:blue-kite/xbp_puppet_profile_logstash.git /etc/puppet/modules/logs > /tmp/git.log 2>&1 || error_exit 'Failed to clone role app repo'\n",
                      "chown ubuntu:ubuntu -R /etc/puppet/modules/logs\n",

                      "#Installing Ruby\n",
                      "apt-get -y install libyaml-0-2\n",
                      "apt-get -y install ruby1.9.3\n",
                      "update-alternatives --set ruby /usr/bin/ruby1.9.1\n",
                      "apt-get -y install rubygems\n",
                      "update-alternatives --set gem /usr/bin/gem1.9.1\n",

                      "# Install puppet via gems\n",
                      "sudo gem install puppet --no-rdoc --no-ri > /tmp/gem-puppet.log 2>&1 || error_exit 'Failed install puppet gem'\n",

                      "# Install Librarian Ruby\n",
                      "sudo gem install librarian-puppet --no-rdoc --no-ri > /tmp/gem-librarian-puppet.log 2>&1 || error_exit 'Failed install librarian puppet gem'\n",

                      "# Install application's dependencies via librarian puppet\n",
                      "cd /etc/puppet/modules/logs\n",
                      "sudo librarian-puppet install --clean --verbose --path=/etc/puppet/modules > /tmp/librarian-puppet.log 2>&1 || error_exit 'failed to install puppet submodules'\n",

                      "#setting my custom facts\n",
                      "mkdir -p /etc/facter/facts.d\n",
                      "touch /etc/facter/facts.d/custom_facts.txt\n",
                      "echo ", { "Fn::Join" : [ "" , ["fqdn=logs", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]},        ">> /etc/facter/facts.d/custom_facts.txt\n",
                      "echo ", "stackid=", { "Ref" : "StackID" },       ">> /etc/facter/facts.d/custom_facts.txt\n",
                      "echo ", "revision=", { "Ref" : "AppDeployBranch" }, ">> /etc/facter/facts.d/custom_facts.txt\n",
                      "echo ", { "Fn::Join" : [ "" , ["logserver_host=logs", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]},        ">> /etc/facter/facts.d/custom_facts.txt\n",
                      "echo logserver_port=5001  >> /etc/facter/facts.d/custom_facts.txt\n",
                      "echo app_name=logs >> /etc/facter/facts.d/custom_facts.txt\n",
                      "echo custom_hostname=", { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "HOSTNAME" ]}, ">> /etc/facter/facts.d/custom_facts.txt\n",

                      "# Clone role hostname repo\n",
                      "git clone git@github.com:victormarroquin/Puppet-HostName.git /etc/puppet/modules/hosts > /tmp/git.log 2>&1 || error_exit 'Failed to clone hostname repo'\n",

                      "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug /etc/puppet/modules/hosts/tests/init.pp > /tmp/pupet_hostname.log 2>&1 || error_exit 'failed to apply hosts puppet manifests'\n",

                      "sudo apt-get update\n",
                      "sudo apt-get upgrade\n",

                      "cd /home/ubuntu/sites\n",
                      "sudo sh setup.sh\n",

                      "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug --environment=", { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "ENV" ]}, " /home/ubuntu/sites/site.pp > /tmp/puppet.log 2>&1 || error_exit 'failed to apply puppet manifests'\n",

                    "# Signal setup is complete\n",
                    "cfn-signal -e $? -r 'Completed configuration' '",
                    {
                        "Ref" : "WebServerWaitHandle"
                    },
                    "'\n"
                ]]}}
            }
        },

        "WebServerWaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },

        "WebServerWaitCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "logstashInstance",
            "Properties" : {
                "Handle" : {"Ref" : "WebServerWaitHandle"},
                "Timeout" : "1200"
            }
        }
    },

    "Outputs" : {
        "InstanceId" : {
            "Value" : { "Ref" : "logstashInstance" },
            "Description" : "Instance Id of newly created instance"
        },

        "IPAddress" : {
            "Value" : { "Fn::GetAtt" : [ "logstashInstance", "PrivateIp" ] },
            "Description" : "Private IP address of instance"
        },

        "DomainName" : {
            "Value" : { "Ref" : "DNSRecord" }
        }
    }
}
