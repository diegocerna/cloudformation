{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Test the functions of API v1",

  "Parameters": {
    "Environment" : {
      "Type" : "String",
      "Description": "usr this environments: dev, production, qa, sandbox"
    },

    "KeyName" : {
      "Type":"String"
    },

    "DeployBranch" : {
      "Type" : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default" : "master"
    }
  },

  "Mappings" : {
    "RegionMap" : {
      "sa-east-1"      : {"AMI" : "ami-d545e5c8" },
      "us-west-1"      : {"AMI" : "ami-82b98bc7" },
      "ap-northeast-1" : {"AMI" : "ami-35bbd334" },
      "ap-southeast-1" : {"AMI" : "ami-605c0a32" },
      "ap-southeast-2" : {"AMI" : "ami-fb4bd5c1" },
      "eu-west-1"      : {"AMI" : "ami-d03dcaa7" },
      "us-east-1"      : {"AMI" : "ami-cdc2fda4" },
      "us-west-2"      : {"AMI" : "ami-9a9dfdaa" }
    },

    "dot" : {
      "test"           : { "DOT" : ".test" },
      "dev"            : { "DOT" : ".dev" },
      "qa"             : { "DOT" : ".qa" },
      "sandbox"        : { "DOT" : ".sandbox" },
      "production"     : { "DOT" : "" }
    }
  },
  
  "Resources" : {

    "IPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "InstanceId" : { "Ref" : "TestMachine" }
      }
    },

    "DNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : "bluekite.com.",
        "Comment" : "DNS name for my instance.",
        "Name" : { "Fn::Join" : [ "", ["api_test", { "Fn::FindInMap" : [ "dot", { "Ref" : "Environment" }, "DOT" ]},".bluekite.com"]]},
        "Type" : "CNAME",
        "TTL" : "300",
        "ResourceRecords" : [ { "Fn::GetAtt" : [ "TestMachine", "PublicDnsName" ] } ]
      },
      "DependsOn" : "IPAddress"
    },

    "TestMachine" : {
      "Type" : "AWS::EC2::Instance",

      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "KeyName" : {"Ref": "KeyName"},
        "InstanceType" : "t1.micro",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                    {"Key" : "Name", "Value" : {"Fn::Join" : [ "", ["test.", {"Ref" : "Environment"} ]]}}
                  ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          
          "# Helper function to notify of failed operation\n",
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "APIWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Run Instance default configuration via CloudFormation::Init\n",
          "cfn-init -v --region ", { "Ref" : "AWS::Region" },
          "    -s ", { "Ref" : "AWS::StackId" },
          " -r TestMachine",
          " -c default",
          " || error_exit 'Failed to run cfn-init'\n",

          "# Install puppet & librarian-puppet via gems\n",
          "sudo gem install puppet --no-rdoc --no-ri > /tmp/gem-puppet.log 2>&1 || error_exit 'Failed install puppet gem'\n",
          "sudo gem install librarian-puppet --no-rdoc --no-ri > /tmp/gem-librarian-puppet.log 2>&1 ||error_exit 'Failed install librarian-puppet gem'\n",

          "# Clone app repo to ubuntu user home\n",
          "git clone git@github.com:blue-kite/api-specs.git -b ", {"Ref" : "DeployBranch"}, "  /home/ubuntu/specs > /tmp/git.log 2>&1 || error_exit 'Failed to clone repo'\n",
          "chown ubuntu:ubuntu -R /home/ubuntu/specs\n",

          "# Install librarian-puppet submodules\n",
          "cd /home/ubuntu/specs/puppet\n",
          "export HOME=/home/ubuntu && librarian-puppet install --clean --verbose > /tmp/librarian-puppet.log 2>&1 || error_exit 'failed to install puppet submodules'\n",

          "# Install app",
          "cd /home/ubuntu/specs\n",
          "sudo puppet apply --verbose --modulepath=puppet/modules puppet/manifests/aws-", {"Ref": "Environment"}, ".pp > /tmp/puppet.log 2>&1 || error_exit 'failed to apply puppet manifests'\n",

          "# Signal setup is complete\n",
          "cfn-signal -e $? -r 'Completed configuration' '",
          {
            "Ref" : "APIWaitHandle"
          },
          "'\n"
        ]]}
        }
      }
    },

    "APIWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "APIWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "TestMachine",
      "Properties" : {
        "Handle" : {"Ref" : "APIWaitHandle"},
        "Timeout" : "1200"
      }
    }
  }
}
