{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Forrest Server - filename:forrest.template",

  "Parameters" : {

    "Environment" : {
      "Type" : "String",
      "Default" : "dev"
    },

    "KeyName" : {
      "Type" : "String",
      "Default" : "stamp-"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m3.medium",
      "AllowedValues" : [ "t2.micro","m1.small","m3.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "DeployBranch" : {
      "Type" : "String",
      "Description" : "Wich branch you want to use as source"
    },

    "StackID" : {
      "Type" : "String",
      "Description" : "Stack ID name",
      "Default" : "-"
    },

    "SG" : {
      "Type" : "String",
      "Default" : "sg-",
      "Description" : "Security Group (default = 'dev')"
    },

    "SubnetId" : {
      "Type" : "String",
      "Default" : "subnet-",
      "Description" : "default is for dev"
    },

    "Version" : {
      "Type" : "String",
      "Description" : "stamp1 for current version, stamp2 for disaster recovery and staging for staging production"
    },

    "AppDeployBranch" : {
      "Type" : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default" : ""
    },

    "RoleDeployBranch" : {
      "Type" : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default" : ""
    },

    "SitesDeployBranch" : {
      "Type" : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default" : ""
    }

  },

"Mappings" : {
    "InstancesAMIS" : {
      "us-east-1"      : { "AMI" : "ami-0e07a566" },
      "us-west-1"      : { "AMI" : "ami-49ede60c" },
      "us-west-2"      : { "AMI" : "ami-8b6d2ebb" },
      "sa-east-1"      : { "AMI" : "ami-d545e5c8" },
      "ap-northeast-1" : { "AMI" : "ami-35bbd334" },
      "ap-southeast-1" : { "AMI" : "ami-605c0a32" },
      "ap-southeast-2" : { "AMI" : "ami-fb4bd5c1" },
      "eu-west-1"      : { "AMI" : "ami-d03dcaa7" }
    },

    "version" : {
      "stamp1"          : { "HOSTNAME" : "fst1001" },
      "stamp2"          : { "HOSTNAME" : "fst1002" },
      "staging"         : { "HOSTNAME" : "fst3001" }
    },

    "env" : {
      "dev"            : { "ENV" : "development", "DOT" : ".dev" },
      "qa"             : { "ENV" : "qa", "DOT" : ".qa" },
      "sandbox"        : { "ENV" : "sandbox", "DOT" : ".sandbox"  },
      "production"     : { "ENV" : "production", "DOT" : "" }
    }
  },

  "Resources":{

    "myDNSRecord2" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : "bluekite.com.",
        "Comment" : "Endponit of Forrest.",
        "Name" : {"Fn::Join" : ["", ["forrest", { "Ref" : "StackID" } , { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]},".bluekite.com."]]},
        "Type" : "A",
        "TTL" : "300",
        "ResourceRecords" : [
          {"Fn::GetAtt" : ["Forrest", "PrivateIp"]}
        ]
      },
      "DependsOn" : "Forrest"
    },

    "Forrest" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "InstancesAMIS", { "Ref" : "AWS::Region" }, "AMI" ]},
        "KeyName" : {"Ref" : "KeyName"},
        "InstanceType" : {"Ref" : "InstanceType"},
        "SecurityGroupIds" : [{"Ref" : "SG"}],
        "SubnetId" : {"Ref" : "SubnetId"},
        "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : [".", ["Forrest", {"Ref" : "Environment"}]]} } ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",

          "# Helper function to notify of failed operation\n",
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "EventWaitHandler" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Run Instance default configuration via CloudFormation::Init\n",
          "cfn-init -v --region ", { "Ref" : "AWS::Region" },
          "    -s ", { "Ref" : "AWS::StackId" },
          " -r Forrest",
          " -c default",
          " || error_exit 'Failed to run cfn-init'\n",

          "# Register Github fingerprints\n",
          "ssh-keygen -f ~/.ssh/known_hosts -H -F github.com | grep -q found || ssh-keyscan -H github.com >> ~/.ssh/known_hosts\n",

          "# Copy credentials to root user\n",
          "cp /home/ubuntu/.ssh/* /root/.ssh/\n",

          "# Add FQDN on etc/environment\n",
          "echo ", { "Fn::Join" : [ "" , ["FQDN=forrest", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]}, ">> /etc/environment\n",
          "echo ", "STACKID=", { "Ref" : "StackID" }, ">> /etc/environment\n",

          "# Clone sites repo to ubuntu user home\n",
          "git clone -b", { "Ref" : "SitesDeployBranch" }, "git@github.com:blue-kite/xbp_puppet_sites.git /home/ubuntu/sites > /tmp/git.log 2>&1 || error_exit 'Failed to clone sites repo'\n",

          "# Clone role app repo\n",
          "git clone -b ", { "Ref" : "RoleDeployBranch" }, "git@github.com:blue-kite/xbp_puppet_role_forrest.git /etc/puppet/modules/forrest > /tmp/git.log 2>&1 || error_exit 'Failed to clone role app repo'\n",
          "chown ubuntu:ubuntu -R /etc/puppet/modules/forrest\n",

          "#Installing Ruby\n",
          "apt-get -y install libyaml-0-2\n",
          "apt-get -y install ruby1.9.3\n",
          "update-alternatives --set ruby /usr/bin/ruby1.9.1\n",
          "apt-get -y install rubygems\n",
          "update-alternatives --set gem /usr/bin/gem1.9.1\n",

          "# Install puppet via gems\n",
          "sudo gem install puppet --no-rdoc --no-ri > /tmp/gem-puppet.log 2>&1 || error_exit 'Failed install puppet gem'\n",

          "# Install Librarian Ruby\n",
          "sudo gem install librarian-puppet --no-rdoc --no-ri > /tmp/gem-librarian-puppet.log 2>&1 || error_exit 'Failed install librarian puppet gem'\n",

          "# Install application's dependencies via librarian puppet\n",
          "cd /etc/puppet/modules/forrest\n",
          "sudo librarian-puppet install --clean --verbose --path=/etc/puppet/modules > /tmp/librarian-puppet.log 2>&1 || error_exit 'failed to install puppet submodules'\n",

          "#setting my custom facts\n",
          "mkdir -p /etc/facter/facts.d\n",
          "touch /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", { "Fn::Join" : [ "" , ["fqdn=forrest", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]},        ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", "stackid=", { "Ref" : "StackID" },       ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", "revision=", { "Ref" : "AppDeployBranch" }, ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", { "Fn::Join" : [ "" , ["logserver_host=logs", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]},        ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo logserver_port=5001  >> /etc/facter/facts.d/custom_facts.txt\n",
          "echo app_name=forrest >> /etc/facter/facts.d/custom_facts.txt\n",
          "echo custom_hostname=", { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "HOSTNAME" ]}, ">> /etc/facter/facts.d/custom_facts.txt\n",

          "echo ", { "Fn::Join" : [ "" , ["nagios_internal_gateway_host=gw", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]},      ">> /etc/facter/facts.d/custom_facts.txt\n",


          "# Clone role hostname repo\n",
          "git clone git@github.com:victormarroquin/Puppet-HostName.git /etc/puppet/modules/hosts > /tmp/git.log 2>&1 || error_exit 'Failed to clone hostname repo'\n",

          "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug /etc/puppet/modules/hosts/tests/init.pp > /tmp/pupet_hostname.log 2>&1 || error_exit 'failed to apply hosts puppet manifests'\n",

          "sudo apt-get update\n",
          "sudo apt-get upgrade\n",

          "cd /home/ubuntu/sites\n",
          "sudo sh setup.sh\n",

          "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug --environment=", { "Fn::FindInMap" : [ "env", { "Ref" : "Environment" }, "ENV" ]}, " /home/ubuntu/sites/site.pp > /tmp/puppet.log 2>&1 || error_exit 'failed to apply puppet manifests'\n",

          "# Signal setup is complete\n",
          "cfn-signal -e $? -r 'Completed configuration' '",
          {
            "Ref" : "EventWaitHandler"
          },
          "'\n"

        ]]}}
      },

      "Metadata" : {
        "Comment" : "API Forrest Application",
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : ["config_packages"]
          },
          "config_packages" : {
            "packages" : {
              "apt" : {
                "git"                        : [],
                "curl"                       : [],
                "tmux"                       : [],
                "build-essential"            : [],
                "python-software-properties" : []
              }
            }
          }
        }
      }
    },

    "EventWaitHandler" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "EventWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "Forrest",
      "Properties" : {
        "Handle" : {"Ref" : "EventWaitHandler"},
        "Timeout" : "1500"
      }
    }
  }
}
