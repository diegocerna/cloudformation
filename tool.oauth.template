{
  "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Configure Oauth Node.js Application - filename:tool.oauth.template",

  "Parameters" : {
    "Version" : {
      "Description" : "Value to add the instance to az1 or az2",
      "Type" : "String",
      "AllowedValues" : [ "stamp1","stamp2","staging1","staging2","sandbox1","sandbox2","qa1","qa2"],
      "Default" : "qa1"
    },

    "StackID" : {
      "Type" : "String",
      "Description" : "Stack ID name",
      "Default" : "-"
    },

    "StackIDDB" : {
      "Type" : "String",
      "Description" : "Stack ID name for DataBase",
      "Default" : ""
    },

    "dbpass" : {
      "NoEcho": "true",
      "Type": "String",
      "Description" : "Psql password"
    },

    "AppDeployBranch" : {
      "Type" : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default" : ""
    },

    "RoleDeployBranch" : {
      "Type" : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default" : ""
    },

    "SitesDeployBranch" : {
      "Type" : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default" : ""
    }
  },

  "Mappings" : {
    "RegionMap" : {
      "sa-east-1"      : {"AMI" : "ami-d545e5c8" },
      "us-west-1"      : {"AMI" : "ami-15829450" },
      "ap-northeast-1" : {"AMI" : "ami-35bbd334" },
      "ap-southeast-1" : {"AMI" : "ami-605c0a32" },
      "ap-southeast-2" : {"AMI" : "ami-fb4bd5c1" },
      "eu-west-1"      : {"AMI" : "ami-d03dcaa7" },
      "us-east-1"      : {"AMI" : "ami-286ee740" },
      "us-west-2"      : {"AMI" : "ami-ad1d569d" }
    },

    "version" : {
      "stamp1"          : { "HOSTNAME" : "oau1001", "AppEnv" : "production", "REGION" : "us-west-2", "IP" : "10.10.5.6",  "dbuser" : "bree",     "dbname" : "bree_prod", "InstanceType" : "m3.medium", "DOT" : "",         "SUBNET" : "subnet-970cefce", "SG" : "sg-42bed227", "keypair" : "stamp-prod" },
      "stamp2"          : { "HOSTNAME" : "oau1002", "AppEnv" : "production", "REGION" : "us-west-2", "IP" : "10.10.6.6",  "dbuser" : "bree",     "dbname" : "bree_prod", "InstanceType" : "m3.medium", "DOT" : "",         "SUBNET" : "subnet-90a509f5", "SG" : "sg-42bed227", "keypair" : "stamp-prod" },
      "staging1"        : { "HOSTNAME" : "oau3001", "AppEnv" : "staging",    "REGION" : "us-east-1", "IP" : "10.30.5.6",  "dbuser" : "bree_app", "dbname" : "bree_prod", "InstanceType" : "m3.medium", "DOT" : ".staging", "SUBNET" : "subnet-69b57542", "SG" : "sg-6f8b790b", "keypair" : "iad_id_rsa" },
      "staging2"        : { "HOSTNAME" : "oau3002", "AppEnv" : "staging",    "REGION" : "us-east-1", "IP" : "10.30.6.6",  "dbuser" : "bree_app", "dbname" : "bree_prod", "InstanceType" : "m3.medium", "DOT" : ".staging", "SUBNET" : "subnet-a4d95dd3", "SG" : "sg-6f8b790b", "keypair" : "iad_id_rsa" },
      "sandbox1"        : { "HOSTNAME" : "oau4001", "AppEnv" : "sandbox",    "REGION" : "us-west-1", "IP" : "10.10.22.6", "dbuser" : "null",     "dbname" : "null",      "InstanceType" : "t2.medium", "DOT" : ".sandbox", "SUBNET" : "subnet-2500fa40", "SG" : "sg-37fa3c52", "keypair" : "stamp-sandbox" },
      "sandbox2"        : { "HOSTNAME" : "oau4002", "AppEnv" : "sandbox",    "REGION" : "us-west-1", "IP" : "10.10.52.6", "dbuser" : "null",     "dbname" : "null",      "InstanceType" : "t2.medium", "DOT" : ".sandbox", "SUBNET" : "subnet-08112b4e", "SG" : "sg-37fa3c52", "keypair" : "stamp-sandbox" },
      "qa1"             : { "HOSTNAME" : "oau5001", "AppEnv" : "qa",         "REGION" : "us-east-1", "IP" : "10.3.0.6",   "dbuser" : "null",     "dbname" : "null",      "InstanceType" : "t2.medium", "DOT" : ".qa",      "SUBNET" : "subnet-db6668f3", "SG" : "sg-59632a3c", "keypair" : "stamp-qa"},
      "qa2"             : { "HOSTNAME" : "oau5002", "AppEnv" : "qa",         "REGION" : "us-east-1", "IP" : "10.3.0.7",   "dbuser" : "null",     "dbname" : "null",      "InstanceType" : "t2.medium", "DOT" : ".qa",      "SUBNET" : "subnet-ca70bdbd", "SG" : "sg-59632a3c", "keypair" : "stamp-qa"}
    }
  },

  "Conditions" : {
    "CreateIntResources" : {"Fn::Or" : [
      {"Fn::Equals" : [{ "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "AppEnv" ]}, "production"]},
      {"Fn::Equals" : [{ "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "AppEnv" ]}, "staging"]}
      ]
    },
    "CreateExtResources" : {"Fn::Or" : [
      {"Fn::Equals" : [{ "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "AppEnv" ]}, "qa"]},
      {"Fn::Equals" : [{ "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "AppEnv" ]}, "sandbox"]}
      ]
    }
  },

  "Resources" : {
    "IPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Condition" : "CreateExtResources",
      "Properties" : {
      "Domain" : "vpc",
      "InstanceId" : { "Ref" : "WebServerInstance" }
      }
    },

    "ExtDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Condition" : "CreateExtResources",
      "Properties" : {
        "HostedZoneName" : "bluekite.com.",
        "Comment" : "DNS name for my instance.",
        "Name" : { "Fn::Join" : [ "", ["oauth", { "Ref" : "StackID" }, ".bluekite.com"]]},
        "Type" : "A",
        "TTL" : "300",
        "ResourceRecords" : [ { "Fn::GetAtt" : [ "WebServerInstance", "PublicIp" ] } ]
      },
      "DependsOn" : "IPAddress"
    },

    "IntDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Condition" : "CreateIntResources",
      "Properties" : {
        "HostedZoneName" : "bluekite.com.",
        "Comment" : "DNS name for my instance.",
        "Name" : { "Fn::Join" : [ "", ["oauth", { "Ref" : "StackID" } , { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "DOT" ]},".bluekite.com"]]},
        "Type" : "A",
        "TTL" : "300",
        "ResourceRecords" : [ { "Fn::GetAtt" : [ "WebServerInstance", "PrivateIp" ] } ]
      },
      "DependsOn" : "WebServerInstance"
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
      "Path" : "/",
      "Roles" : ["SendEmails"]
      }
    },

    "WebServerInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
      "Comment" : "Oauth NodeJS Application"},
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SecurityGroupIds" : [{ "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "SG" ]}],
        "InstanceType" : { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "InstanceType" ]},
        "SubnetId" : { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "SUBNET" ]},
        "PrivateIpAddress" : { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "IP" ]},
        "KeyName" : { "Fn::FindInMap"  : [ "version",   { "Ref" : "Version" },     "keypair" ]},
        "IamInstanceProfile" : {"Ref" : "InstanceProfile"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, {"Key" : "Environment", "Value" : { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "AppEnv" ]}},
        {"Key" : "Name", "Value" : { "Fn::Join" : ["-", ["oauth", { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "AppEnv" ]} ]]}}],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "# Helper function to notify of failed operation\n",
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WebServerWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Run Instance default configuration via CloudFormation::Init\n",
          "cfn-init -v --region ", { "Ref" : "AWS::Region" },
          "    -s ", { "Ref" : "AWS::StackId" },
          " -r WebServerInstance",
          " -c default",
          " || error_exit 'Failed to run cfn-init'\n",

          "# Register Github fingerprints\n",
          "ssh-keygen -f ~/.ssh/known_hosts -H -F github.com | grep -q found || ssh-keyscan -H github.com >> ~/.ssh/known_hosts\n",
          "# Copy credentials to root user\n",
          "cp /home/ubuntu/.ssh/* /root/.ssh/\n",

          "# Clone sites repo to ubuntu user home\n",
          "git clone -b ", { "Ref" : "SitesDeployBranch" }, " git@github.com:blue-kite/xbp_puppet_sites.git /home/ubuntu/sites > /tmp/git.log 2>&1 || error_exit 'Failed to clone sites repo'\n",

          "# Clone role app repo\n",
          "git clone -b ", { "Ref" : "RoleDeployBranch" }, " git@github.com:blue-kite/xbp_puppet_rol_bree.git /etc/puppet/modules/bree > /tmp/git.log 2>&1 || error_exit 'Failed to clone role app repo'\n",
          "chown ubuntu:ubuntu -R /etc/puppet/modules/bree\n",

          "#Installing Ruby\n",
          "apt-get -y install libyaml-0-2\n",
          "apt-get -y install ruby1.9.3\n",
          "update-alternatives --set ruby /usr/bin/ruby1.9.1\n",
          "update-alternatives --set gem /usr/bin/gem1.9.1\n",

          "# Install application's dependencies via librarian puppet\n",
          "cd /etc/puppet/modules/bree\n",
          "rm Gemfile*\n",
          "sudo librarian-puppet install --clean --verbose --path=/etc/puppet/modules > /tmp/librarian-puppet.log 2>&1 || error_exit 'failed to install puppet submodules'\n",

          "#setting my custom facts\n",
          "mkdir -p /etc/facter/facts.d\n",
          "touch /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", "revision=", { "Ref" : "AppDeployBranch" }, ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo custom_hostname=", { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "HOSTNAME" ]}, ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", "stackid=", { "Ref" : "StackID" }, ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", { "Fn::Join" : [ "" , ["oauth_db_host=oauthdb", { "Ref" : "StackIDDB" }, { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "DOT" ]}, ".bluekite.com" ]]}, ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", "oauth_db_name=", { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "dbname" ]},  ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", "oauth_db_user=", { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "dbuser" ]},  ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", "oauth_db_pass=", { "Ref" : "dbpass" },  ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo aws_region=", { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "REGION" ]}, ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo oauth_db_port=5432  >> /etc/facter/facts.d/custom_facts.txt\n",
          "echo app_name=oauth >> /etc/facter/facts.d/custom_facts.txt\n",
          "echo ", { "Fn::Join" : [ "" , ["oauth_redis_host=oredis", { "Ref" : "StackIDDB" }, { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "DOT" ]}, ".bluekite.com" ]]}, ">> /etc/facter/facts.d/custom_facts.txt\n",
          "echo oauth_redis_port=6379  >> /etc/facter/facts.d/custom_facts.txt\n",

          "# Clone role hostname repo\n",
          "git clone git@github.com:victormarroquin/Puppet-HostName.git /etc/puppet/modules/hosts > /tmp/git.log 2>&1 || error_exit 'Failed to clone hostname repo'\n",

          "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug /etc/puppet/modules/hosts/tests/init.pp > /tmp/pupet_hostname.log 2>&1 || error_exit 'failed to apply hosts puppet manifests'\n",

          "sudo apt-get update\n",
          "sudo apt-get upgrade\n",

          "cd /home/ubuntu/sites\n",
          "sudo sh setup.sh\n",

          "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug --environment=", { "Fn::FindInMap" : [ "version", { "Ref" : "Version" }, "AppEnv" ]}, " /home/ubuntu/sites/site.pp > /tmp/puppet.log 2>&1 || error_exit 'failed to apply puppet manifests'\n",

          "# Signal setup is complete\n",
          "cfn-signal -e $? -r 'Completed configuration' '",
            {
              "Ref" : "WebServerWaitHandle"
            },
            "'\n"
        ]]}}
      }
    },

    "WebServerWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WebServerWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "WebServerInstance",
      "Properties" : {
      "Handle" : {"Ref" : "WebServerWaitHandle"},
      "Timeout" : "600"
      }
    }
  },

  "Outputs" : {
    "InstanceId" : {
        "Value" : { "Ref" : "WebServerInstance" },
        "Description" : "Instance Id of newly created instance"
    }
  }
}