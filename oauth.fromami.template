{
  "AWSTemplateFormatVersion" : "2010-09-09",
  
  "Description" : "Configure Oauth Node.js Application - filename:oauth-no_dns.template",
  
  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters.",
      "Default": "stamp-prod"
    },
        
    "Environment" : {
      "Description" : "Environment for the Url",
      "Type" : "String",
      "Default" : "production"
    },

    "Zone" : {
      "Description" : "Value to add the instance to az1 or az2",
      "Type" : "String",
      "AllowedValues" : [ "az1","az2"],
      "Default" : "az1"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m3.medium",
      "AllowedValues" : [ "t1.micro","m1.small","m3.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SecurityGroupId" : {
      "Type" : "String",
      "Description" : "SecurityGroupId of an existing subnet in your Virtual Private Cloud (VPC)",
      "Default": { "Ref": "sgOauthTest" 
    }
},

  "Mappings" : {
    "RegionMap" : {
      "sa-east-1"      : {"AMI" : "ami-d545e5c8" },
      "us-west-1"      : {"AMI" : "ami-82b98bc7" },
      "ap-northeast-1" : {"AMI" : "ami-35bbd334" },
      "ap-southeast-1" : {"AMI" : "ami-605c0a32" },
      "ap-southeast-2" : {"AMI" : "ami-fb4bd5c1" },
      "eu-west-1"      : {"AMI" : "ami-d03dcaa7" },
      "us-east-1"      : {"AMI" : "ami-0e07a566" },
      "us-west-2"      : {"AMI" : "ami-01521a31" }
    },

    "dot" : {
      "test"           : { "DOT" : ".test" },
      "dev"            : { "DOT" : ".dev" },
      "qa"             : { "DOT" : ".qa" },
      "sandbox"        : { "DOT" : ".sandbox" },
      "production"     : { "DOT" : "" }
    },

    "Zone" : {
      "az1"            : { "ZONE" : "10.10.5.6", "HOSTNAME" : "oau1001", "SUBNET" : "subnet-8a0cefd3" },
      "az2"            : { "ZONE" : "10.10.6.6", "HOSTNAME" : "oau1002", "SUBNET" : "subnet-9da509f8" }
    }
  },

  "Resources" : {

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
      "Path" : "/",
      "Roles" : ["SendEmails"]
      }
    },

    "WebServerInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment" : "Oauth NodeJS Application"
    },
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SecurityGroupIds" : [ {"Ref" : "SecurityGroupId"} ],
        "InstanceType" : { "Ref" : "InstanceType" },
        "SubnetId" : { "Fn::FindInMap" : [ "Zone", { "Ref" : "Zone" }, "SUBNET" ]},
        "PrivateIpAddress" : { "Fn::FindInMap" : [ "Zone", { "Ref" : "Zone" }, "ZONE" ]},
        "KeyName" : { "Ref" : "KeyName" },
        "IamInstanceProfile" : {"Ref" : "InstanceProfile"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : { "Fn::Join" : ["-", ["oauth",{"Ref":"Zone"},{"Ref":"Environment"} ]]}}],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                      "#!/bin/bash\n",

          "# Helper function to notify of failed operation\n",
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WebServerWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Run Instance default configuration via CloudFormation::Init\n",
          "cfn-init -v --region ", { "Ref" : "AWS::Region" },
          "    -s ", { "Ref" : "AWS::StackId" },
          " -r WebServerInstance",
          " -c default",
          " || error_exit 'Failed to run cfn-init'\n",

          "#setting my custom facts\n",
          "mkdir -p /etc/facter/facts.d\n",
          "touch /etc/facter/facts.d/custom_facts.txt\n",
          "echo custom_hostname=", { "Fn::FindInMap" : [ "Zone", { "Ref" : "Zone" }, "HOSTNAME" ]}, ">> /etc/facter/facts.d/custom_facts.txt\n",

          "sudo apt-get update\n",
          "sudo apt-get upgrade\n",

          "rm -rf /etc/puppet/modules/hosts\n",
          "# Clone role hostname repo\n",
          "git clone git@github.com:victormarroquin/Puppet-HostName.git /etc/puppet/modules/hosts > /tmp/git.log 2>&1 || error_exit 'Failed to clone hostname repo'\n",

          "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug /etc/puppet/modules/hosts/tests/init.pp > /tmp/pupet_hostname.log 2>&1 || error_exit 'failed to apply hosts puppet manifests'\n",

          "# Signal setup is complete\n",
          "cfn-signal -e $? -r 'Completed configuration' '",
          {
            "Ref" : "WebServerWaitHandle"
          },
          "'\n"
        ]]}}
      }
    },

      "WebServerWaitHandle" : {
        "Type" : "AWS::CloudFormation::WaitConditionHandle"
      },

      "WebServerWaitCondition" : {
        "Type" : "AWS::CloudFormation::WaitCondition",
        "DependsOn" : "WebServerInstance",
        "Properties" : {
          "Handle" : {"Ref" : "WebServerWaitHandle"},
          "Timeout" : "1500"
        }
      }
    },

    "Outputs" : {
      "InstanceId" : {
        "Value" : { "Ref" : "WebServerInstance" },
        "Description" : "Instance Id of newly created instance"
    }
  }
}
