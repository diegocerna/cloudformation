{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Elasticsearch Node - filename:elasticsearchnode.template",

  "Parameters"      : {
    "KeyName"                 : {
      "Description"           : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type"                  : "String",
      "MinLength"             : "1",
      "MaxLength"             : "255",
      "AllowedPattern"        : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters.",
      "Default"               : "stamp-elasticsearch"
    },

    "InstanceType"            : {
      "Description"           : "WebServer EC2 instance type",
      "Type"                  : "String",
      "Default"               : "t2.micro",
      "AllowedValues"         : [ "t2.micro","m1.small","m3.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SubnetId"        : {
      "Type"          : "String",
      "Description"   : "SubnetId of an existing subnet in your Virtual Private Cloud (VPC)",
      "Default"       : "subnet-10382856"
    },

    "SecurityGroupId" : {
      "Type"          : "String",
      "Description"   : "SecurityGroupId of an existing subnet in your Virtual Private Cloud (VPC)",
      "Default"       : "sg-3c29a059"
    },

    "StackID"       : {
      "Type"        : "String",
      "Description" : "Stack ID name",
      "Default"     : "-"
    },

    "DeployBranch"  : {
      "Type"        : "String",
      "Description" : "Git branch where to deploy the code from.",
      "Default"     : "master"
    },

    "Environment"   : {
      "Type"        : "String",
      "Description" : "Application's environment.",
      "Default"     : "production"
    },

    "ApplicationTag"       : {
      "Type"        : "String",
      "Description" : "For logstash use 'logs' for Search use 'elk'",
      "Default"     : "elk"
    },

    "NodeType"      : {
      "Type"        : "String",
      "Description" : "The node type, it can be emaster or enode(for data only)",
      "Default"     : "emaster"
    },

    "NodeID"        : {
      "Type"        : "String",
      "Description" : "The data node identification, 1..n",
      "Default"     : "1"
    }

  },

  "Mappings" : {
    "RegionMap"        : {
      "sa-east-1"      : {"AMI" : "ami-d545e5c8" },
      "us-west-1"      : {"AMI" : "ami-a72e25e2" },
      "ap-northeast-1" : {"AMI" : "ami-35bbd334" },
      "ap-southeast-1" : {"AMI" : "ami-605c0a32" },
      "ap-southeast-2" : {"AMI" : "ami-fb4bd5c1" },
      "eu-west-1"      : {"AMI" : "ami-d03dcaa7" },
      "us-east-1"      : {"AMI" : "ami-c070d5a8" },
      "us-west-2"      : {"AMI" : "ami-5f5e186f" }
    },
    "dot"              : {
      "test"           : { "DOT" : ".test" },
      "dev"            : { "DOT" : ".dev" },
      "qa"             : { "DOT" : ".qa" },
      "sandbox"        : { "DOT" : ".sandbox" },
      "production"     : { "DOT" : "" }
    }
  },

  "Resources" : {


    "DNSRecord"           : {
      "Type"              : "AWS::Route53::RecordSet",
      "Properties"        : {
        "HostedZoneName"  : "bluekite.com.",
        "Comment"         : "DNS name for my instance.",
        "Name"            : { "Fn::Join" : [ "", [{ "Ref" : "ApplicationTag" }, "-", { "Ref" : "NodeType" }, { "Ref" : "NodeID" }, { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "dot", { "Ref" : "Environment" }, "DOT" ]},".bluekite.com"]]},
        "Type"            : "A",
        "TTL"             : "900",
        "ResourceRecords" : [ { "Fn::GetAtt" : [ "ElkInstance", "PrivateIp" ] } ]
      },
      "DependsOn" : "ElkInstance"
    },

    "ElkInstance"     : {
      "Type"          : "AWS::EC2::Instance",
        "Metadata"    : {
          "Comment"   : "Catalog - Rails Aplication Instance"
        },
        "Properties"          : {
          "ImageId"           : {   "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
          "SecurityGroupIds"  : [   {"Ref" : "SecurityGroupId"} ],
          "SubnetId"          : {   "Ref" : "SubnetId" },
          "InstanceType"      : {   "Ref" : "InstanceType" },
          "KeyName"           : {   "Ref" : "KeyName" },
          "Tags"              : [ { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                                  { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [{ "Ref" : "ApplicationTag" }, "-", { "Ref" : "NodeType" }, { "Ref" : "NodeID" }, { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "dot", { "Ref" : "Environment" }, "DOT" ]}]]} } ],
          "UserData"          : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",

            "# Helper function to notify of failed operation\n",
            "function error_exit\n",
            "{\n",
            "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "ElkWaitHandle" }, "'\n",
            "  exit 1\n",
            "}\n",

            "# Run Instance default configuration via CloudFormation::Init\n",
            "cfn-init -v --region ", { "Ref" : "AWS::Region" },
            "    -s ", { "Ref" : "AWS::StackId" },
            " -r ElkInstance",
            " -c default",
            " || error_exit 'Failed to run cfn-init'\n",

            "# Register Github fingerprints\n",
            "ssh-keygen -f ~/.ssh/known_hosts -H -F github.com | grep -q found || ssh-keyscan -H github.com >> ~/.ssh/known_hosts\n",

            "# Copy credentials to root user\n",
            "cp /home/ubuntu/.ssh/* /root/.ssh/\n",

            "# Clone app repo to ubuntu user home\n",
            "git clone git@github.com:blue-kite/elasticsearch_server.git -b ", {"Ref" : "DeployBranch"}, " /home/ubuntu/elasticsearch_server" , " > /tmp/git.log 2>&1 || error_exit 'Failed to clone repo'\n",
            "chown ubuntu:ubuntu -R /home/ubuntu/elasticsearch_server\n",

            "# Add FQDN on etc/environment\n",
            "echo ", { "Fn::Join" : [ "" , ["FACTER_fqdn=", { "Ref" : "ApplicationTag" }, "-", { "Ref" : "NodeType" }, { "Ref" : "NodeID" }, { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "dot", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com" ]]}, ">> /etc/environment\n",
            "echo ", "STACKID=", { "Ref" : "StackID" }, ">> /etc/environment\n",

            "#Installing Ruby\n",
            "apt-get -y install libyaml-0-2\n",
            "apt-get -y install ruby1.9.3\n",
            "update-alternatives --set ruby /usr/bin/ruby1.9.1\n",
            "update-alternatives --set gem /usr/bin/gem1.9.1\n",

            "#Install puppet via gems\n",
            "sudo gem install puppet --no-rdoc --no-ri > /tmp/gem-puppet.log 2>&1 || error_exit 'Failed install puppet gem'\n",

            "#Install Librarian Ruby\n",
            "sudo gem install librarian-puppet --no-rdoc --no-ri > /tmp/gem-librarian-puppet.log 2>&1 || error_exit 'Failed install librarian puppet gem'\n",

            "# Install application's dependencies via puppet\n",
            "cd /home/ubuntu/elasticsearch_server/puppet\n",
            "export HOME=/home/ubuntu && librarian-puppet install --clean --verbose > /tmp/librarian-puppet.log 2>&1 || error_exit 'failed to install puppet submodules'\n",

            "# setting my custom facts\n",
            "mkdir -p /etc/facter/facts.d > /tmp/facts.log 2>&1 || error_exit 'failed to create facter directory'\n",
            "touch /etc/facter/facts.d/custom_facts.txt\n",
            "echo ", "app_name=",    { "Ref" : "ApplicationTag" }, "-", { "Ref" : "NodeType" }, { "Ref" : "NodeID" }, ">> /etc/facter/facts.d/custom_facts.txt\n",
            "echo ", "stackid=",     { "Ref" : "StackID" },        ">> /etc/facter/facts.d/custom_facts.txt\n",
            "echo ", "nodeid=",      { "Ref" : "NodeID" },         ">> /etc/facter/facts.d/custom_facts.txt\n",
            "echo ", "apptag=",      { "Ref" : "ApplicationTag" }, ">> /etc/facter/facts.d/custom_facts.txt\n",
            "echo ", "masterhost=",  { "Fn::Join" : [ "", [{ "Ref" : "ApplicationTag" }, "-emaster", { "Ref" : "StackID" }, { "Fn::FindInMap" : [ "dot", { "Ref" : "Environment" }, "DOT" ]}, ".bluekite.com"]]}, ">> /etc/facter/facts.d/custom_facts.txt\n",
            "echo ", "env=",         { "Ref" : "Environment" },    ">> /etc/facter/facts.d/custom_facts.txt\n",

            "# Clone role hostname repo\n",
            "git clone git@github.com:victormarroquin/Puppet-HostName.git /etc/puppet/modules/hosts > /tmp/git.log 2>&1 || error_exit 'Failed to clone hostname repo'\n",

            "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug /etc/puppet/modules/hosts/tests/init.pp > /tmp/puppet.log 2>&1 || error_exit 'failed to apply hosts puppet manifests'\n",

            "sudo apt-get update\n",
            "sudo apt-get upgrade\n",

            "cd /home/ubuntu/elasticsearch_server\n",
            "export LANG=en_US.UTF-8; sudo puppet apply --verbose --debug --modulepath=puppet/modules puppet/manifests/site.pp > /tmp/puppet.log 2>&1 || error_exit 'failed to apply puppet manifests'\n",

            "# Signal setup is complete\n",
            "cfn-signal -e $? -r 'Completed configuration' '",
            {
              "Ref" : "ElkWaitHandle"
            },
            "'\n"
          ]]}}
        }
    },

    "ElkWaitHandle" : {
      "Type"        : "AWS::CloudFormation::WaitConditionHandle"
    },

    "ElkWaitCondition"  : {
      "Type"            : "AWS::CloudFormation::WaitCondition",
      "DependsOn"       : "ElkInstance",
      "Properties"      : {
        "Handle"        : {"Ref" : "ElkWaitHandle"},
        "Timeout"       : "2000"
      }
    }
  },

  "Outputs"         : {
    "InstanceId"    : {
      "Value"       : { "Ref" : "ElkInstance" },
      "Description" : "Instance Id of newly created instance"
    },

    "IPAddress"     : {
      "Value"       : { "Fn::GetAtt" : [ "ElkInstance", "PrivateIp" ] },
      "Description" : "Private IP address of instance"
    },

    "DomainName"  : {
      "Value"     : { "Ref" : "DNSRecord" }
    }
  }
}
